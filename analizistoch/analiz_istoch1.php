<!DOCTYPE html> 
<html>
 <head>
   <title>Анализ источников первый этап</title>
  <meta charset="utf-8">
  <script type="text/javascript" src="путь к jQuery.js"></script>
  </head>
 <body>
 <!-- парсить источники http://westseo.ru/simple-php-parser/, сохранять данные в БД, формировать отчет в виде html-таблицы -->
 <!-- Парсит - автоматически обрабатывать (разбирать) источники с целью получения нужных данных -->
 <?php
 // Getting started
 $ch = curl_init (); //  инициализация
 curl_setopt ($ch, CURLOPT_URL, "http://industrialconflicts.ru/adm/confmsg/?_a=view&id=1242417&_from=0");
 curl_setopt ($ch , CURLOPT_USERAGENT , "Google Chrome");
 curl_setopt ($ch , CURLOPT_RETURNTRANSFER , 1 ); // вывод страницы в переменную
 
 $content = curl_exec($ch); // скачиваем страницу
 curl_close($ch); // закрываем соединение
 
 // Расчленение
/* на скаченной странице меня интересуют поля: ID источника, источник, рубрики по глоссарию, опубликовано; просматрива html код страницы - видим:
<b>1242417</b> - ID источника;
<tr><th>Источник</th><td>Прокуратура Красноярского края - источник;
<tr><th>Рубрики по глоссарию</th><td><li><span>Причины трудовых конфликтов&nbsp;&raquo;&nbsp;Заработная плата</span></li><li><span>Итог трудового конфликта&nbsp;&raquo;&nbsp;Выплата долгов по заработной плате</span></li> - рубрики по глоссарию;
<tr><th>Опубликовано</th><td><div class="ed-checkbox ed-checkbox-1"></div> - опубликовано; */

// Напишем регулярное выражение, которое будет "выдирать" интересующие нас названия и адреса из кода страницы:

preg_match_all ();

// Вырезка
// будем скачивать странички со статьями и вырезать из них интересующую нас информацию.
// Просматривая код страницы, можно обнаружить, что текст статьи всегда обрамлён следующими тегами. На основе этого закона мы и постоим парсер

for ($i =  0; $i < count($matches[1]); $i++)  // цикл по всем извлеченным адресам
{
	echo ".$matches[1][$i].";
	


/* jQuery — библиотека JavaScript, фокусирующаяся на взаимодействии JavaScript и HTML. Библиотека jQuery помогает легко получать доступ к любому элементу DOM, обращаться к атрибутам и содержимому элементов DOM, манипулировать ими. Также библиотека jQuery предоставляет удобный API для работы с AJAX. */

jQuery(function($) {
  // здесь код скрипта, где в $ будет находиться объект, предоставляющий доступ к функциям jQuery
})

// возможно - Переход по дереву DOM, включая поддержку XPath как плагина;
 
    // путь на закладку инфоцентр http://industrialconflicts.ru/adm/
    // путь на закладку сообщения, обработанные http://industrialconflicts.ru/adm/confmsg/?&_filter=4
    // путь на закладку шум http://industrialconflicts.ru/adm/confmsg/?&_filter=5
    
 ?>
  </body> 
</html>




