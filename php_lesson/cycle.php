<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>Циклы</title>
</head>

<body>
<?php
// цикл - вид условной конструкции php, многократное повторение набора действий входящего в тело цикла, пока истино условие цикла
// прохождение цикла - это 1 итерация

// три основных вида цикла: for, while, do while

// рассмотрим цикл for
// тело цикла находится в { ... }

echo 'for#1:<br>';  // первый пример
for ($i = 0; $i < 5; $i++) { 
	echo $i .'<br>';		
	}
// вывелось значение от 0 до 4
	
echo '<br>';

echo 'for#2:<br>';
for ($i = 5; $i > 0; $i--) { 
	echo $i .'<br>';		
	}
// вывелось значение от 5 до 1

// рассмотрим цикл while
echo '<br>';
echo 'while#1:<br>';

// начальные значения нужно присваивать счетчикам до цикла while

$i = 0;
while ($i < 5) {
	echo $i.'<br>';
	$i++; // чтобы цикл не работал вечно	
}
// вывелось значение от 0 до 4

echo '<br>';
echo 'while#2:<br>';

$i = 5;
while ($i > 0) {
	echo $i.'<br>';
	$i--;
}
// вывелось значение от 5 до 1

echo '<br>';
echo 'while#3:<br>';

$i = - 2;
while ($i > 0) {
	echo $i.'<br>';
	$i--;
}
// цикл не выведет ни одной итерации

echo '<br>';
echo 'while#4:<br>';

$i = - 2;
// оператор do
do {
	echo $i.'<br>';
	$i--;
}
while ($i > 0); // Обязательно нужна точка с запятой ;
// вывелось значение -2 и цикл завершился так как проверка идет после тела цикла
// то есть сначала выполняется тело цикла, а потом происходит его проверка; 
// нужно в том случае, когда хотя бы один раз, но тело должно быть выполнено

// вложенные циклы
echo '<br>';

$m = 1; // создание счетчика

while ($m <= 5) {
	echo 'Цикл 1, итерация'. $m. '<br><br>'; // тело цикла while, где $m - номер итерации
$n = 1;
// вложенный цикл
while ($n <= 3) {
	echo '---Цикл 2-вложенный, итерация'. $n. '<br>'; // тело вложенного цикла while, где $n - номер итерации
	$n++; // приращение счетчика, чтобы цикл не завис для вложенного цикла
}

echo '<br>';

$m++;	// приращение счетчика, чтобы цикл не завис
}

// внешний цикл будет выполняться от 1 до 5, т.е. 5 раз, а внутренний цикл - будет выполняться по три раза
// см. рис. img_cycle.jpg папка IMG_teoryphp


echo '<br>';

// управление циклом (например досрочное прерывание цикла)

// досрочное прерывание цикла
$i = 0;
while ($i < 10) {
	if ($i==3) break; // досрочное проерывание цикла, с помощью оператора break по условию if
	echo $i.'<br>';
	$i++;	
}

// прерывание текущей итерации 
echo '<br>';

$i = 0;
while ($i < 10) {
	$i++; //счетчик нужно ставить до оператора continue, чтобы цикл не стал бесконечным, и успел выполнить приращение значения счетчика
	if ($i >= 3 && $i <= 7) continue; 
	//continue - немедленно прерывает текущую итерацию и перейдет к началу цикла, и далее будет осуществлять проверку условия
	echo $i.'<br>';	
}
/* несмотря на то, что счетчик ведет счет с нуля, в вывод браузера попадает 1-ца, так как у нас после проверки условия сразу же идет приращение счетчика на единицу, => 1 выведется в браузерном окне. Далее идет 2,8,9,10 так как только у нас стало значение равное 3-м, сработал оператор continue, прервалась итерация, и пошло выполняться снова начало цикла, и снова проверка уже на 4, и т.д. до 7, значения с 3 до 7 выпали из выполняемого цикла, на 8 оператор continue уже не сработал, и значение 8 уже вывелось браузером, аналогично до 10*/

echo '<br>';

// бесконечные циклы
// нужно воремя останавливать и прерывать

$i = 0;
// true - выражение истины => цикл будет бесконечным
while (true) {
	if ($i==100) break; // сработает оператор break на 100 и цикл завершится
	echo $i. '<br>';
	$i++;
}
?>
</body>
</html>